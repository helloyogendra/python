# Config-Map
# We will load this config-map inside a deployment/pod
# Pod will load these values like environment variable
# Later our code inside that pod can read these environment variables to connect with the mysql-db-service [ type=cluster-ip service]
#########################################################################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap1
data:
  host: mysql-service
  user: root
  port: '3306'

---
# Secrets
# Password which is mentioned in secret object is being used by both statefulset(pod) & deployment (pod)
# While creating the mySql pod statefulset will use this password to protect our database.
# While creating the Deployment pod, We will use this password to access the mySql pod in statefulset.
# Deployment Pod --> cluster-ip-service -> mySql pod in statefulset
#########################################################################################################################################
apiVersion: v1
kind: Secret
metadata:
  name: secret1
type: Opaque
data:
  password: YWJjZDEyMzQ=


---
# Statefulset is a workload resources.
# mySql pod/s in statefulset
# Secret object required to protect mySql Pod/Database.
# Service [Cluster-IP] required for internal communication with other pods inside Kubernetes Cluster.
# Volume/Storage required to store data outside pod/container.
#########################################################################################################################################
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql-service
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          resources:
          limits:
            memory: "256Mi"
            cpu: "750m"
          requests:
            memory: "128Mi"
            cpu: "500m"
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret1
                  key: password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

    


---
# Service-for-sts
# Cluster-IP
#########################################################################################################################################
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    protocol: TCP


---
# deployment-app-code
# deployment is a workload resources.
# Python-Code [custom-docker-image] is now part of pods controlled by deployment.
# Secret object required to access the pods of Statefulset [mySql Database].
# It will use the Service [Cluster-IP] to communication with Statefulset [mySql Database].
# we are laoding the essential info through Config-Map.
#########################################################################################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: website-deploy
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: python
  template:
    metadata:
      labels:
        app: python
    spec:
      containers:
      - name: python
        image: helloyogendra/custom-web:1.1
        ports:
          - containerPort: 4000
            name: http-web
        env:
        - name: DB_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: configmap1
              key: host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: configmap1
              key: port
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: configmap1
              key: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secret1
              key: password
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
          requests:
            memory: "128Mi"
            cpu: "250m"
      volumes:
        - name: config-volume
          configMap:
            name: configmap1
        - name: secret-volume
          secret:
            secretName: secret1



---
# Service-for-deployment
# Exposing the deployment/pods for external communication.
#########################################################################################################################################
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: NodePort
  selector:
    app: python
  ports:
  - port: 4000
    protocol: TCP
    targetPort: http-web


kubectl get all
kubectl get pods
kubectl describe pods my-app
kubectl replace -f pod-demo1.yaml
clear
kubectl get po
kubectl delete -f pod-demo1.yaml
clear
kubectl get pods
clear
kubectl get all   #get all objects
alias k=kubectl
k get pods
k get pods --all-namespaces
k get pods -A
# kubectl get <kind/type of object>
clear
#Kubernetes Object Management
#kubectl create -f demo1.yaml -f demo2.yaml
#kubectl delete -f demo1.yaml -f demo2.yaml
#kubectl delete -f demo1.yaml
ls
# declarative approach is - apply command
# kubectl apply -f file.yaml
# kubectl apply -f configs/
kubectl get pods
kubectl apply -f configs/
# now modify one/more file/s in this configs directory and we can try to run apply again
kubectl diff -f configs/
#recursively processing the folders = kubectl apply -R -f configs/
clear
# for one object try to stick with one style of command/object management technique
# create a new K8s object using command = kubectl create -f demo.yaml, and try again with apply instead of create
# kubectl run, kubectl create, kubectl expose,
# kubectl get, kubectl describe, kubectl logs
# with apply we can specify single file, multiple files or folder/s, Urls
kubectl events --types=Warning    #list all warning events
kubectl get events --types=Warning    #list all warning events
kubectl
kubectl get --help
clear
kubectl get events
kubectl get events --sort-by=.metadata.creationTimestamp
clear
#Patch
kubectl apply -f deploy-demo-patch1.yaml
kubectl get pods
kubectl patch deployement demo-patch --patch-file patch.yaml
kubectl patch deployment demo-patch --patch-file patch.yaml
kubectl get deployment demo-patch --output yaml
kubectl get pods
# kubectl get pod <pod_name> --output yaml
clear
#Resource Management
#CPU and Memory
kubectl get apiservices | grep metrics
kubectl top node
kubectl top pod
#Metrics server collects cluster-wide metrics and it allows us to get them using API
#Memory Units - 1K = 1000 (G,M,K) Megabytes
#Memory Units - 1Mi = 1024 (Gi,Mi,Ki) Mebibytes
#specifying resource quota on namespace level
kubectl create namespace test-ns
kubectl apply -f ns-limit-demo.yaml --namespace=test-ns      #map the limit-range with our namespace
kubectl create namespace cpu-ns
kubectl apply -f ns-limit-demo2.yaml --namespace=cpu-ns
kubectl get resourcequota ns-cpu-limit --namespace=cpu-ns --output=yaml
clear
kubectl apply -f demo-pod-ns.yaml --namespace=cpu-ns
kubectl get pod demo-quota-ns --namespace=cpu-ns
kubectl get resourcequota ns-cpu-limit --namespace=cpu-ns --output=yaml
kubectl apply -f demo-pod-ns2.yaml --namespace=cpu-ns
clear
kubectl create -f resource/memory-fine.yaml
kubectl top pod memory-fine
kubectl top pod
kubectl top node
kubectl get pods
# resource- mgmt - cpu-memory
# labels & aanotations
# deployments, replicasets, daemonsets, statefulsets
kubectl apply -f ns-limit-demo.yaml --namespace=test-ns
kubectl apply -f demo-pod-limitRange.yaml --namespace=test-ns
kubectl get pods --namespace=test-ns
kubectl get pods my-app-limirange --output=yaml --namespace=test-ns
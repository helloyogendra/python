#Deployments
kubectl apply -f deploy-demo1.yaml
kubectl get deploy
kubectl get rs
kubectl get pod
kubectl pods --show-labels
kubectl get pods --show-labels
kubectl describe deployment nginx-deploy
clear
# from history/last sessions find the command to scale-up/down your deployment
kubectl get rs -w
# kubectl get rs -w    #after scaling up/down watch the replicaset using this command
# create a replicaset directly (without any deployment) and try to scale-up/down your RS
kubectl apply -f deploy-demo1.yaml
kubectl rollout status deployment nginx-deploy
kubectl get rs
kubectl get pods
kubectl delete -f deploy-demo1.yaml
clear
kubectl get all
kubectl delete all --all
clear
kubectl apply -f deploy-demo2.yaml
kubectl get all
kubectl apply -f deploy-demo2.yaml
kubectl get all
kubectl rollout status deploy/ nginx-deploy1
kubectl rollout status deploy/nginx-deploy1
clear
kubectl get all
kubectl scale deployment nginx-deploy1 --replicas=4
kubectl get all
kubectl apply -f deploy-demo2.yaml
clear
kubectl get pods
kubectl rollout history deployment/nginx-deploy1
kubectl rollout status -w deployment/nginx-deploy1    #run this command to watch the rollout-status of deployment=nginx-deploy1
kubectl rollout undo deployment/nginx-deploy1
kubectl get pods
clear
kubectl get all
#with each new update deployment is going to create a new replicaset
#and because of old replicasets we can rollback to previous version of deployment
#update deployment 4-5 times
#delete the all unused replicasets manually by using the delete command
#now try to run the - undo rollout command
# kubectl rollout undo deployment/deploy-name --to-revision=1     #rollback directly to this version, assume we have 5 versions
clear
kubectl get all
kubectl delete rs,pod -l app=ngx
kubectl get all
clear
kubectl get all
clear
kubectl get all
kubectl delete rs,pod -l app=ngx
# kubectl delete service,pod <service-name> <pod-name>    #try this command to delete these two objects with these names
kubectl get all
kubectl delete deployment nginx-deploy1
clear
kubectl get all
kubectl apply -f daemonset-demo1.yaml
kubectl get pods
kubectl get pods --namespace=kube-system
kubectl get daemonsets
kubectl get daemonsets --namespace=kube-system
clear
kubectl apply -f statefulset-demo1.yaml
kubectl get svc
kubectl get pods
kubectl delete -f statefulset-demo1.yaml
kubectl apply -f statefulset-demo1.yaml
kubectl get statefulset web
# stateful set will do the pod creation in a ordered way
kubectl get pods -l app=nginx
#try to go inside these pods associated with statefulset
clear
kubectl delete pod -l app=nginx
kubectl get pods
kubectl get pvc -l app=nginx
kubectl scale sts web --replicas=4
kubectl get pods
kubectl scale statefulset/web --replicas=2
kubectl get pods
# try to update or patch the statefulset
# if you have created objects like deployments, replicasets, statefulset, try to delete these objects using  --cascade=orphan
clear
#Services
kubectl get all
kubectl delete -f statefulset-demo1.yaml
kubectl get all
clear
docker network ls
clear
#Service
# NodePort, LoadBalancer, ClusterIP etc
# Additional - Ingress - not exactly a service but it is like a traffic router
# Additional - Istio - ServiceMesh - service to service communication through proxy Pod
kubectl get all
kubectl create deployment hellp-app --image=nginx
kubectl get all
kubectl expose deployment hello-app --type=NodePort --port=80
kubectl expose deployment hellp-app --type=NodePort --port=80
kubectl get svc
kubectl delete svc hellp-app
kubectl delete deployment hellp-app
clear
kubectl create deployment apche-app --image=httpd
kubectl expose deployment apche-app --type=LoadBalancer --port=80
kubectl get svc
kubectl get pods -o wide
#try to go inside this apache pod and modify the index.html
# refresh browser to reload your app, make sure service is there
kubectl exec -it apche-app-7db96b9d94-kcxk8 -- /bin/bash
# cd htdocs/
# echo "just testing the pod" > index.html
# above two we need to run inside pod, after 'exec' command
#Cluster_IP = no ouside access, inside cluster communication, by default
#NodePort = primary way to handle the traffic, expose the app for outside communication/external traffic, opens a port and maps with the container port
#LoadBalancer = standard way to expose the service to handle the tarffix from internet
clear
kubectl apply -f service-pod-demo1.yaml
kubectl get all
kubectl delete deploy,service apche-app apche-app
kubectl get all
clear
kubectl apply -f service-pod-demo2.yaml
kubectl get all
kubectl get pods -o wide

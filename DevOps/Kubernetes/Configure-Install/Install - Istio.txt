#Open the following page and download - "C:\Users\hello\Downloads\istio-1.16.1-linux-amd64.tar.gz"
https://github.com/istio/istio/releases

#now unzip using below command
$ gzip -d istio-1.16.1-linux-amd64.tar.gz
$ tar -xf istio-1.16.1-linux-amd64.tar

#go inside this unzipped folder
$ cd istio-1.16.1/

#set path to access istio 
$ export PATH=$PWD/bin:$PATH

#Install Istio - For this installation, we use the demo configuration profile. 
$ istioctl install --set profile=demo -y

#Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later
$ kubectl label namespace default istio-injection=enabled

#Deploy the Bookinfo sample application:
$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

#The application will start. As each pod becomes ready, the Istio sidecar will be deployed along with it.
$ kubectl get services
$ kubectl get pods
$ kubectl get ns

#Verify everything is working correctly up to this point. Run this command to see if the app is running inside the cluster and serving HTML pages by #checking for the page title in the response:

$ kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

#Open the application to outside traffic
#The Bookinfo application is deployed but not accessible from the outside. To make it accessible, you need to create an Istio Ingress Gateway, which #maps a path to a route at the edge of your mesh.
#Associate this application with the Istio gateway:

$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml


#Ensure that there are no issues with the configuration:
$ istioctl analyze

